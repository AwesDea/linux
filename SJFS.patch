diff --git a/include/linux/sched.h b/include/linux/sched.h
index d2588263a..3d6335e9a 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -705,7 +705,8 @@ struct task_struct {
 
 	/* CLONE_CHILD_CLEARTID: */
 	int __user			*clear_child_tid;
-
+	u64				previus_spent;
+	u64				previus_knowledge;
 	u64				utime;
 	u64				stime;
 #ifdef CONFIG_ARCH_HAS_SCALED_CPUTIME
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index a7bf32aab..0bcc18dfe 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3227,8 +3227,19 @@ pick_next_task(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
 		/* Assumes fair_sched_class->next == idle_sched_class */
 		if (unlikely(!p))
 			p = idle_sched_class.pick_next_task(rq, prev, rf);
-
-		return p;
+		struct task_struct *tmp_p;
+		struct task_struct *tmp_n = p;
+		u64 current_knowledge;
+		for_each_process(tmp_p) {
+			current_knowledge = (int)(tmp_p->previus_knowledge*0.5) + (int)((tmp_p->utime + tmp_p->stime  - tmp_p->previus_spent)*0.5);
+			tmp_p->previus_knowledge = current_knowledge;
+			tmp_p->previus_spent = tmp_p->utime+tmp_p->stime;
+			if(tmp_p->previus_knowledge < tmp_n->previus_knowledge)
+			{
+				tmp_n = tmp_p;
+			}
+		}
+		return tmp_n;
 	}
 
 again:
